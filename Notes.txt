dotnet ef database update

wwwroot, içinde statik dosyaları içeren bir klasör , eğer klasörde yoksa o klasörün eklenmesi gerekir
konfigüre için , uygulamanın statik dosyalar barındıracağını belirtmek için program.cs içine bir kod yazmamız gerekiyor

dotnet tool install -g Microsoft.Web.LibraryManager.Cli
libman yüklemek için gereken dotnet kodu

libman init -p cdnjs
// ?  herhangi bir sağlayıcı belirtilmediğinde kullanılan yapı
//bir json dosyası oluşturuyor

//cdnjs üzerinden bootstrapı kurarken bir kütüphane kurulumu şeklinde süreç ilerleyecel

libman -h //libman komutlarına dair yardım
libman install -h 
libman install bootstrap -d wwwroot/lib/bootstrap
libman install font-awesome -d wwwroot/lib/awesome
libman install jquery -d wwwroot/lib/jquery

dotnet new list 
dotnet komutu ile yeni kurulabilecek proje şablonlarını gösterir

varlıklar projesi oluşturacaz (entities)
classlib proje şablonu olarak kullanılacak
yeni projeyi store içine koyacağımız için kök klasör olarak mvc de olarak bu komutu yazıcaz
 dotnet new classlib -f net6.0 -o .\Store\Entities

dotnet sln .\Store.sln list //komut ile solusion hangi projelerle bağlantılı ona bakabiliyoruz
PS C:\Kodlar\backend çalışma\mvc\Store> dotnet sln .\Store.sln add .\Entities\
entities projesini çözüme ekledi

PS C:\Kodlar\backend çalışma\mvc\Store> dotnet add .\StoreApp\ reference .\Entities\
iki proje arası referans yapıyor
bu referans StoreApp.csproj dosyası içerisine eklendi
<ItemGroup>
    <ProjectReference Include="..\Entities\Entities.csproj" />
  </ItemGroup> şeklinde

bu referans sonrasında , Product klasörünü taşıdığımız için çoğu sayfadaki referansları tekrar düzenlememiz gerekiyor
yani
using Entities.Models; 
kodunu sıkıntı yapan dosyalara eklememiz lazım

viewler için _ViewImports dosyasına ekleyebiliriz

projeyi build yaparken dotnet build komutunu kullanıcaz
PS C:\Kodlar\backend çalışma\mvc\Store> dotnet build (yine dotnet watch komutunu kullanıyoruz)

dotnet watch derken StoreApp e geçiş yapmamız gerekiyor

Repository için StoreApp altında da tanımlayabilirz ama başka projelerde de kullanıcaksak ayrı bir proje olarak tanımlamak daha iyi
birbiriyle bağlantılı projeler kurulacağı vakit için daha iyi olur 

PS C:\Kodlar\backend çalışma\mvc> dotnet new classlib -f net6.0 -o .\Store\Repositories 
komudunu kullandık
PS C:\Kodlar\backend çalışma\mvc> dotnet sln .\Store\ add .\Store\Repositories\
komudu ile Repositories projesini çözüme ekledik

başta genel alt klasöre geldik , sln dedikten sonra çözümü belirttik sonra add diyip ilgili
projenin pathini tanımlamış olduk.

bu Repositories projesini RepositoryContext klasörü için ekledik 
PS C:\Kodlar\backend çalışma\mvc> dotnet add .\Store\StoreApp\ reference .\Store\Repositories\       
komudu ile referans ekledik

PS C:\Kodlar\backend çalışma\mvc> dotnet add .\Store\Repositories\ package Microsoft.EntityFrameworkCore --version 6.0.0
.\Store\Repositories\ : proje ismi
package : ekleme yapacağımız şey (paket veya referans)
dotnet add .\Store\Repositories\ package Microsoft.EntityFrameworkCore.Sqlite --version 6.0.0

PS C:\Kodlar\backend çalışma\mvc> dotnet list .\Store\Repositories\ package
ilgili projedeki paketlerin listesini veriyor.

PS C:\Kodlar\backend çalışma\mvc> dotnet remove .\Store\StoreApp\ package Microsoft.EntityFrameworkCore 
ilgili projeden ilgili paketi kaldırdı
dotnet remove .\Store\StoreApp\ package Microsoft.EntityFrameworkCore.Sqlite

not: Microsoft.EntityFrameworkCore.Design paketini okuyamıyordu , o nedenle bir daha ekledim
dotnet add .\Store\StoreApp\ package Microsoft.EntityFrameworkCore.Design 

RepositoryContext i models klasöründen silip Repositories projesine aktardık sonra da
using entitiyframeworkcore; ifadesini ekledik
not: bu noktada normalde hata çıkmıyordu ama ben ne olur ne olmaz ekledim

dotnet add .\Repositories\ reference .\Entities\
normalde bir hata almıyordum ama ne olur ne olmaz bu ikisini referans ettim 
bu sayadece Repositories içindeki RepositoryContext de,
using Entities.Models; ifadesini kullanabiliyoruz

ProductController dosyasına using Repositories; ekledim, StoreApp.Models; i kaldırdım.
Migrations u direkt kaldırdık
(daha sonra başka bir Migrations alınacak)

Program.cs de de aynı işlem yapıldı
_ViewImports dosyasında sadece StoreApp.Models silinde , Repositories eklenmedi (yorum satırı olarak ekledim)
sonuç olarak dotnet build dediğimde çalıştı.

dotnet ef üzerinden Migrations işlemi yürütülüyor.
 dotnet ef database drop komudunu kullandık.
ilgili veritabanını tamamen siliyor
dotnet add package Microsoft.EntityFrameworkCore --version 7.0.5 ekledim , bir metod bulunamıyor diye
Method not found: 'System.Collections.Generic.IList`1<Microsoft.EntityFrameworkCore.Metadata.Conventions.IModelFinalizingConvention>
 Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet.get_ModelFinalizingConventions()'.

bu bir işe yaramadı, ben de 6.0.0 sürümlerini indirdim o vakit çalıştı
dotnet ef migrations add startPoint
dotnet ef database update

ile database ler halloldu

sqlite3 .\ProductDb.db
.mode box
select * from Products;

ile database i kontrol ettik. 

IRepositoryBase isimde bir dosya yaptık


6.7 ->
dotnet ef Migrations add Category
PS C:\Kodlar\backend çalışma\mvc\Store\StoreApp> dotnet ef Migrations add Category
bu sayede dotnet üzerinde yeni bir migrations oluşacak, Category ile ilgili tanımların veri tabanına yansıması için gerekli
sciptleri oluşturacak
bundan önce gerekli tanımlamaları vs yaptık

sonra,
dotnet ef database update
komutunu kullanıyoruz
böylelikle sqlite da yeni bir tablo oluşmuş olacak 
PS C:\Kodlar\backend çalışma\mvc> sqlite3 ProductDb.db
sqlite> .tables

7.2------
yeni bir classlib ekliyoruz
PS C:\Kodlar\backend çalışma\mvc\Store> dotnet new classlib -f net6.0 -o Services

ilgili projeyi çözüm ile ilişkilendirmek lazım 
PS C:\Kodlar\backend çalışma\mvc\Store> dotnet sln .\Store.sln add .\Services\ 
Not: mvc/Store uzantılı yerdeyiz dikkat
eğer mvc klasöründe olsaydık ona göre sln ve services klasörünü Store/Services gibi bir şekilde belirtmek gerekirdi

Services projesine referanslar eklememiz gerekiyor. diğer projelerle ilişkili olucak 
PS C:\Kodlar\backend çalışma\mvc\Store> dotnet add .\Services\ reference .\Entities\
PS C:\Kodlar\backend çalışma\mvc\Store> dotnet add .\Services\ reference .\Repositories\
Services projesinde Services.csproj dosyası içerisinde referansların eklendiği belirtilmiş

interface tanımı yapmak için contracts klasörü ekledik 
ilgili ifadeleri uygulamak adına ProductManager.cs dosyası oluşturduk

RepositoryManager ile tüm Repositoryleri yönetebiliyoruz

ServicesManager yazdıktan sonra configuration işlemi yapmamız lazım IoC ye
bunun için program cs odak noktası
ama bunun için ilgili referansı vermemiz lazım
not: normalde vs de olsa referans vermeye gerek olmayabilir
PS C:\Kodlar\backend çalışma\mvc\Store> dotnet add .\StoreApp\ reference .\Services\

kayıtlar şuan repo üzerinden geliyor

görünüm birleşeni : ViewComplement
belirli durumlarda sayfanın belirli kısımları sayfanın kalanından bağımsız çalışması gerekebilir
partial view modelden bağımsız çalışması gibi

ProductSummary tanımlama sebebimiz ürün sayısını dönebilecek bir yapı

9.3 ----
normalde asıl modeller entities üzerinde ama ayrıca admin üzerinde model tasarımı için ilgili yerde de klasör açılabilir

@{
    Layout = "_Layout"; 
    @* normalde Admin altında bir shared içinde _Layout dosyası oluşturmasaydık
    bu Layoutu ana layout olarak alacaktı çünkü program admin altında Layout var mı bakıyor
    olmayınca StoreApp altında bakıp alıyordu
    ama admin klasörü altında bir shared içinde layout dosyası varsa ilk oradan alacaktır *@
}

<table> 
        <thead>
            <tr>
                <th></th>     burada 4 tane th için th*4 yazıp ctrl space ile bulduk
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
    </table>

th : table head
td : table data

*** <a class="btn btn-warning" asp-action="Update" asp-route-id="@prd.ProductId">Edit</a>
burada asp-route-id kısmı ile , update nin boş tanımlanan kısmı ile Product/1 , Product/2 gibi sayfalar oluşuyor 

 public IActionResult Update([FromRoute(Name ="id")]int id)
        {
            return View();
        }
bu tanımlama ile tam olarak oldu

?id=1 gibi bir ifade olsaydı buna QueryString 

hiçbir zaman arayüzlerde program detayı yer almaz

//10.2 ----
 önce mevcut database yi fiziksel olarak ortadan kaldırıyoruz
Store/StoreApp> dotnet ef database drop

migrations klasörünü de silmemiz lazım
 del .\Migrations\

 Entities altında product içinde categoryId ekliyoruz

Config dosyalarınıı ve RepositoryContext de gerekli düzenlemelerden sonra migration alıyoruz
\Store\StoreApp> dotnet ef migrations add init

değişiklikleri database üzerinde yansıtmamız gerekiyor

manuel olarak bir category eklemeye çalışırsak :
insert into Categories(CategoryName) VALUES('SmartPhone');

bir ürün girerken her bilgi aynı anda girilmemesi gerekebilir , bir kısmı bir zaman diğer kısmı başka zaman
şeklinde bilgi girişi olabilir , bu noktada DTO lar kullanılıyor
? bilgi taşıma işlemine yarıyor galiba
DTO : Data Transfer Objects



































